 private $debugInfo = []; // Array untuk menyimpan informasi debug

    private function calculateEntropy($data)
    {
        $total = count($data);
        $labelCounts = [];

        foreach ($data as $row) {
            $label = (string) $row['label'];
            if (!isset($labelCounts[$label])) {
                $labelCounts[$label] = 0;
            }
            $labelCounts[$label]++;
        }

        $entropy = 0.0;
        foreach ($labelCounts as $count) {
            $probability = $count / $total;
            $entropy -= $probability * log($probability, 2);
        }

        return $entropy;
    }

    private function calculateGain($data, $attribute, $entropy)
    {
        $subsets = collect($data)->groupBy($attribute);
        $total = count($data);

        $attributeEntropy = 0.0;
        foreach ($subsets as $subset) {
            $subsetSize = count($subset);
            $subsetEntropy = $this->calculateEntropy($subset);
            $attributeEntropy += ($subsetSize / $total) * $subsetEntropy;
        }

        $gain = $entropy - $attributeEntropy;
        $this->debugInfo[] = [
            'attribute' => $attribute,
            'entropy' => $entropy,
            'gain' => $gain
        ]; // Menyimpan informasi untuk debug

        return $gain;
    }

    private function buildTree($data, $attributes)
    {
        if (empty($data)) {
            return null;
        }

        $baseEntropy = $this->calculateEntropy($data);
        if ($baseEntropy == 0) {
            return (string) $data[0]['label'];
        }

        $bestAttribute = null;
        $bestGain = -INF;
        foreach ($attributes as $attribute) {
            $gain = $this->calculateGain($data, $attribute, $baseEntropy);
            if ($gain > $bestGain) {
                $bestGain = $gain;
                $bestAttribute = $attribute;
            }
        }

        if ($bestAttribute === null) {
            return (string) array_key_first(array_count_values(array_column($data, 'label')));
        }

        $node = new \stdClass();
        $node->attribute = $bestAttribute;
        $node->children = [];

        $subsets = collect($data)->groupBy($bestAttribute);
        foreach ($subsets as $attributeValue => $subset) {
            $node->children[(string) $attributeValue] = $this->buildTree($subset->toArray(), array_diff($attributes, [$bestAttribute]));
        }

        return $node;
    }

    public function index()
    {
        $data = Training::all()->toArray();
        $attributes = ['suhu', 'kelembapan', 'gas', 'api'];

        $tree = $this->buildTree($data, $attributes);

        return view('admin.pages.c45-details', [
            'data' => $data,
            'tree' => $tree,
            'debugInfo' => $this->debugInfo,
            'title' => 'C4.5'
        ]);
    }